config("zlib") {
  libs = []
  include_dirs = [ system_env.ROOT_DIR + "/bin/${current_os}/${compiler_toolchain}/3rdparty/zlib/${current_cpu}/${compile_configure_type}/include" ]
  if (is_win) {
    libs += [ system_env.ROOT_DIR + "/bin/${current_os}/${compiler_toolchain}/3rdparty/zlib/${current_cpu}/${compile_configure_type}/lib/libzlibstatic.a" ]
  } else {
    libs += [ system_env.ROOT_DIR + "/bin/${current_os}/${compiler_toolchain}/3rdparty/zlib/${current_cpu}/${compile_configure_type}/lib/libz.a" ]
  }
}

config("zstd") {
  include_dirs = [ system_env.ROOT_DIR + "bin/${current_os}/${compiler_toolchain}/3rdparty/zstd/${current_cpu}/${compile_configure_type}/include" ]
  libs = [ system_env.ROOT_DIR + "/bin/${current_os}/${compiler_toolchain}/3rdparty/zstd/${current_cpu}/${compile_configure_type}/lib/libzstd.a" ]
}

config("fmt") {
  include_dirs = [ system_env.ROOT_DIR + "/bin/${current_os}/${compiler_toolchain}/3rdparty/fmt/${current_cpu}/${compile_configure_type}/include" ]
  libs = [ system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/fmt/${current_cpu}/${compile_configure_type}/lib/libfmt.a" ]
}

config("icu") {
  defines = [
    "U_DISABLE_RENAMING",
    #"U_STATIC_IMPLEMENTATION",
  ]
  libs = []
  include_dirs = [ system_env.ROOT_DIR + "/bin/${current_os}/${compiler_toolchain}/3rdparty/icu/${current_cpu}/${compile_configure_type}/include" ]
  if (is_win) {
    libs += [
      system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/icu/${current_cpu}/${compile_configure_type}/lib/libsicuuc.a",
      system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/icu/${current_cpu}/${compile_configure_type}/lib/libsicutu.a",
      system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/icu/${current_cpu}/${compile_configure_type}/lib/libsicui18n.a",
      system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/icu/${current_cpu}/${compile_configure_type}/lib/libsicuio.a",
      system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/icu/${current_cpu}/${compile_configure_type}/lib/libsicudata.a",
    ]
  } else {
    libs += [
      system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/icu/${current_cpu}/${compile_configure_type}/lib/libicuuc.a",
      system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/icu/${current_cpu}/${compile_configure_type}/lib/libicutu.a",
      system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/icu/${current_cpu}/${compile_configure_type}/lib/libicui18n.a",
      system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/icu/${current_cpu}/${compile_configure_type}/lib/libicuio.a",
      system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/icu/${current_cpu}/${compile_configure_type}/lib/libicudata.a",
    ]
  }
}

config("openssl") {
  include_dirs = [ system_env.ROOT_DIR + "/bin/${current_os}/${compiler_toolchain}/3rdparty/openssl/${current_cpu}/${compile_configure_type}/include" ]
  libs = [
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/openssl/${current_cpu}/${compile_configure_type}/lib64/libssl.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/openssl/${current_cpu}/${compile_configure_type}/lib64/libcrypto.a",
  ]
}

config("wxwidgets") {
  libs = []
  include_dirs = [
    system_env.ROOT_DIR + "/bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/include",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/mswud",
  ]
  if (is_win) {
    if (is_msvc) {
      libs += [
        "UxTheme.lib",
        "Comctl32.lib",
        "Oleacc.lib",
      ]
    } else {
      libs += [
        "UxTheme",
        "Comctl32",
        "Oleacc",
      ]
    }
  }
  libs += [
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxbase33ud_net.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxbase33ud_xml.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxbase33ud.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxexpatd.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxjpegd.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxlexillad.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxmsw33ud_adv.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxmsw33ud_aui.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxmsw33ud_core.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxmsw33ud_gl.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxmsw33ud_html.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxmsw33ud_media.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxmsw33ud_propgrid.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxmsw33ud_qa.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxmsw33ud_ribbon.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxmsw33ud_richtext.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxmsw33ud_stc.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxmsw33ud_webview.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxmsw33ud_xrc.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxpngd.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxregexud.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxscintillad.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxtiffd.a",
    system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/wxwidgets/${current_cpu}/${compile_configure_type}/lib/clang_x64_lib/libwxzlibd.a",
  ]
}

config("quickfix") {
  include_dirs = [ system_env.ROOT_DIR + "/bin/${current_os}/${compiler_toolchain}/3rdparty/quickfix/${current_cpu}/${compile_configure_type}/include" ]
  libs = [ system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/quickfix/${current_cpu}/${compile_configure_type}/lib/libquickfix.a" ]
}

config("libuv") {
  include_dirs = [ system_env.ROOT_DIR + "/bin/${current_os}/${compiler_toolchain}/3rdparty/libuv/${current_cpu}/${compile_configure_type}/include" ]
  libs = [ system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/libuv/${current_cpu}/${compile_configure_type}/lib/libuv.a" ]
}

config("curl") {
  include_dirs = [ system_env.ROOT_DIR + "/bin/${current_os}/${compiler_toolchain}/3rdparty/curl/${current_cpu}/${compile_configure_type}/include" ]
  libs = [ system_env.ROOT_DIR + "//bin/${current_os}/${compiler_toolchain}/3rdparty/curl/${current_cpu}/${compile_configure_type}/lib/libcurl.a" ]
  defines = [ "CURL_STATICLIB" ]
}
